}
lapply(full, function(row){print(row[1])})
lapply(full, function(row){print(row)})
lapply(full, function(row){print(row[[1]])})
?lapply
sapply(full, function(row){print(row[[1]])})
sapply(full, function(row){print(row[1])})
sapply(full, function(row){print(row[1,1])})
sapply(full, function(row){print(row[1,])})
lapply(menu, function(row){print(row[1,])})
lapply(menu, function(row){print(row[1])})
lapply(menu, function(row){print(row)})
lapply(menu, function(row){print(row$Titles)})
lapply(menu, function(row){print(row[,1])})
lapply(menu, function(row){print(row[1,])})
lapply(menu, function(row){print(row[[1]])})
View(menu)
?apply
apply(menu, function(row){print row})
apply(menu, 1, function(row){print row})
apply(menu, 1, function(row){print(row)})
apply(menu, 1, function(row){print(row[1])})
apply(full, 1, function(row){print(row[1])})
apply(full, 1, function(row){print(row[[1]])})
apply(full, 1, function(row){print(row[[2]])})
apply(full, 1, function(row){print(row[[3]])})
apply(full, 1, function(row){
title_tmp <- row[[1]];
print(title_tmp);
}
)
apply(full, 1, function(row){
title_tmp <- row[[1]];
print(title_tmp);
for (feature_tmp in row[[3]]){
print(feature_tmp);
}
}
)
full[1,]
full[1:5,]
full[1:2,]
apply(full[1:5], 1, function(row){
title_tmp <- row[[1]];
#print(title_tmp);
for (feature_tmp in row[[3]]){
#print(feature_tmp);
cypher(graph, "CREATE (i:Item)-[r:HAS_FEATURE]->(f:Feature) WHERE i.name={items} AND f.name={features}", items=title_tmp, features=feature_tmp);
}
}
)
apply(full, 1, function(row){
title_tmp <- row[[1]];
#print(title_tmp);
for (feature_tmp in row[[3]]){
#print(feature_tmp);
cypher(graph, "CREATE (i:Item)-[r:HAS_FEATURE]->(f:Feature) WHERE i.name={items} AND f.name={features}", items=title_tmp, features=feature_tmp);
}
}
)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
a <- getRandomOptionNodes(graph, 2)
a[[1]
a[[1]]
a[[1]]$name
a[[1]]$keywords
options<-getRandomOptions(graph,2); #Returns option names and IDs
source('~/GitHub/choiceEngineR/test_run.R')
options<-getRandomOptionNodes(graph,2); #Returns option nodes
choice<-options[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")),];
source('~/GitHub/choiceEngineR/test_run.R')
choice<-options[[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))]];
1
options[[1]]
choice<-options[[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))]];
b<- readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))
b
options[[b]]
options[[as.numeric(b)]]
source('~/GitHub/choiceEngineR/test_run.R')
choice<-options[[as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")))]];
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
choice$id
choice$optionId
options[[options$optionId!=choice$optionId];
nonChoice<-options[[options$optionId!=choice$optionId]];
options$optionId!=choice$optionId
options$optionId
source('~/GitHub/choiceEngineR/test_run.R')
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
selectionCode
options[[selectionCode]]
previousChoice <- choice;
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
print(paste("Choice is ",choice$name, sep=""));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
print(paste("Choice is ",choice$name, sep=""));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
choice<-options[[selectionCode]];
print(paste("Choice is ",choice$name, sep=""));
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getNonSelectionCode(1)
getNonSelectionCode(2)
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-option[[getNonChoiceSelectionCode(selectionCode)]];
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-options[[getNonChoiceSelectionCode(selectionCode)]];
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-options[[getNonSelectionCode(selectionCode)]];
print(paste("Choice is ",choice$name, sep=""));
source('~/GitHub/choiceEngineR/test_run.R')
print(paste("Choice is ",choice$name, sep=""));
print(paste("Choice is not",nonChoice$name, sep=""));
print(paste("Choice is not ",nonChoice$name, sep=""));
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
selectionCode <- getSelectionCode(options)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
choice
choice$keywords
choice$description
options[[1]]
options[[2]]
options[[1]]
nonChoice$description
nonChoice$keywords
?split
split(choice$keywords)
?strsplit
strSplit(choice$keywords,",")
strsplit(choice$keywords,",")
unlist(strsplit(choice$keywords,","))
unlist(strsplit(choice$keywords,","))[2]
unlist(strsplit(choice$keywords,","))[1]
optionNode1 <- choice
optionNode2 <- nonChoice
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionNodeDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
print(paste("Choice is ",choice$name, sep=""));
print(paste("Choice is not ",nonChoice$name, sep=""));
saveChoiceNodeToSession(graph, session, i, previousChoice, choice);
session <- createSession(graph);
saveChoiceNodeToSession(graph, session, i, previousChoice, choice);
saveChoiceNodeToSession(graph, session, 1, previousChoice, choice);
chosenFeatures<-getOptionNodeDifference(graph, choice, nonChoice);
chosenFeatures<-getOptionNodeDifference(choice, nonChoice);
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
assignMultipleFeaturePreferencesToSession(graph, session, chosenFeatures, 1);
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
assignMultipleFeaturePreferencesToSession(graph, session, chosenFeatures, 1);
session
nonChosenFeatures<-getOptionNodeDifference(nonChoice, choice);
assignMultipleFeaturePreferencesToSession(graph, session, nonChosenFeatures, -1)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
assignMultipleFeaturePreferencesToSession(graph, session, nonChosenFeatures, -1)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(10)
a<-doesValidSolutionExistBasic(10)
a<-TRUE
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(10)
source('~/GitHub/choiceEngineR/solutionCheck.R')
doesValidSolutionExistBasic(10)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
1
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
top <- getTopOptionInfo(graph, 2, 10)
top <- getTopOptionInfo(graph, session, 10)
top$optionId
getOptionNodeById(graph, topOptions$optionId[[1]]
getOptionNodeById(graph, topOptions$optionId[[1]]
getOptionNodeById(graph, topOptions$optionId[[1]])
getOptionNodeById(graph, top$optionId[[1]])
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
setwd("~/GitHub/RWordNetNeo4j")
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph <- startGraph("http://localhost:7474/db/data/");
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
clear(graph);
?clear()
clear(graph, input=FALSE);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createLexNodes(graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
clear(graph)
graph<-newGraph()
createLexNodes(graph)
verbPath<-"~/Downloads/WordNet-3.0/dict/data.verb"
verbData <- readLines(path);
path<-"~/Downloads/WordNet-3.0/dict/data.verb"
verbData <- readLines(path);
verbData[[1]]
verbData[[10]]
verbData[[100]]
verbData <- verbData[30:length(verbData)];
verbData[[10]]
verbData[[1]]
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
verbIndex <- readLines("~/Downloads/WordNet-3.0/dict/index.verb");
verbIndex[1]
verbIndex[10]
verbIndex[30]
verbIndex[329]
verbIndex[29]
verbIndex <- verbIndex[30:length(verbIndex)];
verbIndex[]
verbIndex[1]
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
verbIndex[10]
verbData[1]
?grep
grep("01471043.*",verbData)
grep("01471043 .*",verbData)
verbData[5913]
grep("^01471043 .*",verbData)
verbData[7297]
a<-01471043
grep(paste("^",a, " .*"),verbData)
paste("^",a, " .*")
paste("^",a, " .*", sep="")
grep(paste("^",a, " .*", sep=""),verbData)
grep(paste("^",a, " .*", sep="", collapse=""),verbData)
paste("^",a, " .*", sep="")
paste("^",a, " .*", sep="", collapse="")
grep(paste("^",a, sep="", collapse=""),verbData)
grep("^1471043 .*",verbData)
grep("^01471043 .*",verbData)
a<-01471043
grep(paste("^",a, sep="", collapse=""),verbData)
grep(paste("^",a, sep=""),verbData)
grep(paste("^",a, " .*",sep=""),verbData)
paste("^",a, " .*",sep="")
grep("^01471043 .*",verbData)
a<-"01471043"
paste("^",a, " .*",sep="")
grep(paste("^",a, " .*",sep=""),verbData)
verbData[grep(paste("^",a, " .*",sep=""),verbData)]
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
findSynsetData(01471043,verbData)
findSynsetData("01471043",verbData)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
verbIndex[10]
findSynsetData("01471043",verbData)
findSynsetData("01449427",verbData)
a<-findSynsetData("01449427",verbData)
a
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
?substring
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
?substring
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
parseSynsetId(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetId(a)
a
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractLexFileNum(a)
a
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractLexFileNum(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractLexFileNum(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractLexFileNum(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetType(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetType(a)
?switch
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetType(a)
a
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractWordCount(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractWordCount(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractWordCount(a)
findSynsetData("01471043",verbData)
b<-findSynsetData("01471043",verbData)
extractWordCount(b)
?as.numeric
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractWordCount(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
?grep
b
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
b
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
b
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
b
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
?length
?substr
?length
?len
?nchar
nchar(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
?remove
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetWords(b)
b
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetPointerCount(b)
?str_extract
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetPointerCount(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
extractSynsetPointerCount(b)
b
