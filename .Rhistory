apply(menu, function(row){print row})
apply(menu, 1, function(row){print row})
apply(menu, 1, function(row){print(row)})
apply(menu, 1, function(row){print(row[1])})
apply(full, 1, function(row){print(row[1])})
apply(full, 1, function(row){print(row[[1]])})
apply(full, 1, function(row){print(row[[2]])})
apply(full, 1, function(row){print(row[[3]])})
apply(full, 1, function(row){
title_tmp <- row[[1]];
print(title_tmp);
}
)
apply(full, 1, function(row){
title_tmp <- row[[1]];
print(title_tmp);
for (feature_tmp in row[[3]]){
print(feature_tmp);
}
}
)
full[1,]
full[1:5,]
full[1:2,]
apply(full[1:5], 1, function(row){
title_tmp <- row[[1]];
#print(title_tmp);
for (feature_tmp in row[[3]]){
#print(feature_tmp);
cypher(graph, "CREATE (i:Item)-[r:HAS_FEATURE]->(f:Feature) WHERE i.name={items} AND f.name={features}", items=title_tmp, features=feature_tmp);
}
}
)
apply(full, 1, function(row){
title_tmp <- row[[1]];
#print(title_tmp);
for (feature_tmp in row[[3]]){
#print(feature_tmp);
cypher(graph, "CREATE (i:Item)-[r:HAS_FEATURE]->(f:Feature) WHERE i.name={items} AND f.name={features}", items=title_tmp, features=feature_tmp);
}
}
)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
a <- getRandomOptionNodes(graph, 2)
a[[1]
a[[1]]
a[[1]]$name
a[[1]]$keywords
options<-getRandomOptions(graph,2); #Returns option names and IDs
source('~/GitHub/choiceEngineR/test_run.R')
options<-getRandomOptionNodes(graph,2); #Returns option nodes
choice<-options[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")),];
source('~/GitHub/choiceEngineR/test_run.R')
choice<-options[[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))]];
1
options[[1]]
choice<-options[[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))]];
b<- readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))
b
options[[b]]
options[[as.numeric(b)]]
source('~/GitHub/choiceEngineR/test_run.R')
choice<-options[[as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")))]];
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
choice$id
choice$optionId
options[[options$optionId!=choice$optionId];
nonChoice<-options[[options$optionId!=choice$optionId]];
options$optionId!=choice$optionId
options$optionId
source('~/GitHub/choiceEngineR/test_run.R')
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
selectionCode
options[[selectionCode]]
previousChoice <- choice;
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
print(paste("Choice is ",choice$name, sep=""));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
print(paste("Choice is ",choice$name, sep=""));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
choice<-options[[selectionCode]];
print(paste("Choice is ",choice$name, sep=""));
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getNonSelectionCode(1)
getNonSelectionCode(2)
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-option[[getNonChoiceSelectionCode(selectionCode)]];
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-options[[getNonChoiceSelectionCode(selectionCode)]];
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-options[[getNonSelectionCode(selectionCode)]];
print(paste("Choice is ",choice$name, sep=""));
source('~/GitHub/choiceEngineR/test_run.R')
print(paste("Choice is ",choice$name, sep=""));
print(paste("Choice is not",nonChoice$name, sep=""));
print(paste("Choice is not ",nonChoice$name, sep=""));
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
selectionCode <- getSelectionCode(options)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
choice
choice$keywords
choice$description
options[[1]]
options[[2]]
options[[1]]
nonChoice$description
nonChoice$keywords
?split
split(choice$keywords)
?strsplit
strSplit(choice$keywords,",")
strsplit(choice$keywords,",")
unlist(strsplit(choice$keywords,","))
unlist(strsplit(choice$keywords,","))[2]
unlist(strsplit(choice$keywords,","))[1]
optionNode1 <- choice
optionNode2 <- nonChoice
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionNodeDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
print(paste("Choice is ",choice$name, sep=""));
print(paste("Choice is not ",nonChoice$name, sep=""));
saveChoiceNodeToSession(graph, session, i, previousChoice, choice);
session <- createSession(graph);
saveChoiceNodeToSession(graph, session, i, previousChoice, choice);
saveChoiceNodeToSession(graph, session, 1, previousChoice, choice);
chosenFeatures<-getOptionNodeDifference(graph, choice, nonChoice);
chosenFeatures<-getOptionNodeDifference(choice, nonChoice);
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
assignMultipleFeaturePreferencesToSession(graph, session, chosenFeatures, 1);
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
assignMultipleFeaturePreferencesToSession(graph, session, chosenFeatures, 1);
session
nonChosenFeatures<-getOptionNodeDifference(nonChoice, choice);
assignMultipleFeaturePreferencesToSession(graph, session, nonChosenFeatures, -1)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
assignMultipleFeaturePreferencesToSession(graph, session, nonChosenFeatures, -1)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(10)
a<-doesValidSolutionExistBasic(10)
a<-TRUE
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(10)
source('~/GitHub/choiceEngineR/solutionCheck.R')
doesValidSolutionExistBasic(10)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
1
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
top <- getTopOptionInfo(graph, 2, 10)
top <- getTopOptionInfo(graph, session, 10)
top$optionId
getOptionNodeById(graph, topOptions$optionId[[1]]
getOptionNodeById(graph, topOptions$optionId[[1]]
getOptionNodeById(graph, topOptions$optionId[[1]])
getOptionNodeById(graph, top$optionId[[1]])
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
dataPath="./testData/"
testData<-readPOSdata(dataPath, verbose=FALSE);
unitTest("Noun data count", nrow(testData$noun),26);
unitTest("Verb data count", nrow(testData$verb),25);
unitTest("Adjective data count", nrow(testData$adj),50);
unitTest("Adverb data count", nrow(testData$adv),25);
graph<-newGraph(username="neo4j", password="graph");
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
createSynsetNodes(graph, testData, verbose=FALSE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),126);
createWordNodes(graph, testData, verbose=FALSE);
unitTest("Word node count", countNodesbyLabel(graph, "Word"),202);
unitTest("Synset-Word relationship count",countRelationshipsByLabel(graph,"has_word"),216);
n<-testData$noun
n
View(n)
testLine<-n[,3]
testLine<-n[3,]
synsetLine<-testLine
transformSynsetDataToSynPointerMap(synsetLine)
a<-getSynsetPointerFrame(n)
View(a)
testMap<-transformSynsetDataToSynPointerMap(synsetLine)
View(testMap)
View(a)
b<-a[a$startWordNum!="00",]
View(b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests()
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
View(n)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests()
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
testData<-readPOSdata(dataPath, verbose=FALSE);
n<-testData$noun
View(n)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
synsetPointerFrame <- getSynsetPointerFrame(n;
synsetPointerFrame <- getSynsetPointerFrame(n)
View(synsetPointerFrame)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
a<-getLexicalPointerWords(synsetPointerFrame)
View(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
View(synsetLine)
View(n)
a<-n[22,]
a
View(a)
testPointers<-getSynsetPointerFrame(a)
View(testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
searchForLexicalWords(testPointers[1,])
searchForLexicalWords(testPointers[2,])
View(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
?cypher
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
?sapply
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
z<-getLexicalPointerWords(graph, testPointers)
z
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
z
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
View(z)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
?split
?strsplit
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
z<-getLexicalPointerWords(graph, testPointers)
line<-testLine
words <- searchForLexicalWords(graph, line);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
words <- searchForLexicalWords(graph, line);
line
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
line
words <- searchForLexicalWords(graph, line);
words <- searchForLexicalWords(graph, pointerFrame[i,]);
View(testLine)
searchForLexicalWords(graph, testLine)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
words <- searchForLexicalWords(graph, pointerFrame[i,]);
words <- searchForLexicalWords(graph, testLine);
graph<-newGraph(username="neo4j", password="graph");
words <- searchForLexicalWords(graph, testLine);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
words <- searchForLexicalWords(graph, testLine);
testLine
View(line)
View(b)
words <- searchForLexicalWords(graph, b);
View(testPointers)
words <- searchForLexicalWords(graph, testPointers);
View(testPointers)
testPointers[1,]
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(testPointers)
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
createLexNodes(graph, verbose=FALSE);
createSynsetNodes(graph, testData, verbose=FALSE);
createWordNodes(graph, testData, verbose=FALSE);
getLexicalPointerWords(graph, testPointers)
?is.null
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
?repeat
?rep
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
View(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
View(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
?round
?ceiling
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
View(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
View(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getLexicalPointerWords(graph, testPointers)
View(testPointers)
lexPointers<-getLegetLexicalPointerWords(graph, testPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
lexPointers<-getLexicalPointerWords(graph, testPointers)
View(lexPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
createLexNodes(graph, verbose=FALSE);
createSynsetNodes(graph, testData, verbose=FALSE);
createWordNodes(graph, testData, verbose=FALSE);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
lexPointers<-getLexicalPointerWords(graph, testPointers)
View(lexPointers)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
