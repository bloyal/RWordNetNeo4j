nicole = createNode(graph, name = "Nicole", status = "Student")
addlabel(nicole, "Person")
source('~/.active-rstudio-document', echo=TRUE)
getNodes(graph, "match (n:Person) return n")
nicole = updateProp(nicole, eyes="green", hair="blonde")
addLabel(nicole, nicole$status)
nicole = deleteProp(nicole, "status")
nicole
?getLabels
getConstraints(graph)
getConstraint(graph)
addConstraint(graph, "Person", "name")
addConstraint(graph, "Bar", "name")
getConstraint(graph)
getNodes(graph, "match (n:Bar) return n")
addConstraint(graph, "Person", "name")
addConstraint(graph, "Bar", "name")
charlies = getUniqueNode(graph, "Bar", name="Cheer Up Charlie's")
createRel(nicole, "DRINKS_AT", mugshots, on = "Fridays")
createRel(niole, "DRINKS_AT", parlor, on="Saturdays")
createRel(nicole, "DRINKS_AT", parlor, on="Saturdays")
rel = createRel(nicole, "DRINKS_AT", charlies, on = "Everyday")
rel = createRel(nicole, "DRINKS_AT", parlor, on="Saturdays")
rel$on
start = startNode(rel)
end = endNode(rel)
start$name
end$name
query = "MATCH (p:Person {name:"Nicole"})-[d:DRINKS_AT]->(b:Bar)
RETURN p.name, d.on, b.name, b.location"
query = "MATCH (p:Person {name:'Nicole'})-[d:DRINKS_AT]->(b:Bar)
RETURN p.name, d.on, b.name, b.location"
cypher(graph, query)
bars = getLabeledNodes(graph, "Bar")
bars
bars_names = lapply(bars, function(b) b$name)
bars_names
[[bars_names]]
[bars_names]
unlist(bars_names)
unique(unlist(bars_names))
clear(graph)
source('~/GitHub/webScrapingTest/scrape_ckf.R')
menu<-getMenuItems()
features<-generateKeyWords(menu)
library(RNeo4j)
graph = startGraph("http://localhost:7474/db/data/")
graph$version
# [1] "2.0.3"
menu[,1]
for (i in menu[,1]) {i}
for (i in menu[,1]) {print(i)}
for (i in menu[,1]) {
createNode(graph, "Person", name = i);
};
addIndex(graph, "Person", "name");
clear(graph)
rm graph
?delete
?del
?rm
graph$version;
for (i in menu[,1]) {print(i)};
for (i in menu[,1]) {
createNode(graph, "Item", name = i);
};
addIndex(graph, "Item", "name");
features
unlist(features)
unique(unlist(features))
#create feature nodes
for (i in unique(unlist(features))) {
createNode(graph, "Feature", name = i);
};
#add index
addIndex(graph, "Feature", "name");
full<-cbind(menu, features)
View(full)
cypher(graph, "CREATE (i:Item {name:Beer})-[r:HAS_FEATURE]->(f:Feature {name:"beer"})")
cypher(graph, "CREATE (i:Item {name:"Beer"})-[r:HAS_FEATURE]->(f:Feature {name:"beer"})")
cypher(graph, "CREATE (i:Item {name:"Beer"})-[r:HAS_FEATURE]->(f:Feature {name:"beer"})")
cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})")
features[1]
full[1,1]
full[1,2]
full[1,3]
full[1,3,1]
full[1,3]
full[1,3][1]
full[1,3][[1]]
?type
type(full)
typeof(full)
typeof(full[1,3])
unlist(full[1,3])
?unlist
unlist(full[1,3])[1]
unlist(full[1,3])[2]
for (i in menu[,1]) {
for (j in features) {
feature_name <- unlist(j[i])
print(i);
print(feature_name);
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
}
}
print(feature_name);
for (j in features) { print j}
for (j in features) print j
for (j in features) {
print(features)
}
for (j in features) {
print(unlist(features))
}
for (j in features) {
print(unlist(features[j]))
}
for (j in features) {
print(unlist(j))
}
features[1]
for (i in menu[,1]) {
for (j in unlist(features[i]) {
print(i);
print(j);
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
}
}
for (i in menu[,1]) {
for (j in unlist(features[i])) {
print(i);
print(j);
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
}
}
for (i in menu[,1]) {
for (j in unlist(features[i])) {
print(i);
print(j);
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
}
}
for (i in menu[,1]) {
for (j in unlist(features[i])) {
print(i)
print(j)
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
}
}
for (i in full){i}
full[1,1]
full[1]
full[2]
full[3]
full[1,1]
full[1,2]
full[1,3]
full[1]
full[1,"Titles"]
full["Titles"]
full[2,"Titles"]
for (i in full) {
i[1,1]
#  for (j in unlist(features[i])) {
#   print(i)
#  print(j)
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
#}
}
for (i in full) {
i[1]
#  for (j in unlist(features[i])) {
#   print(i)
#  print(j)
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
#}
}
for (i in full) {
i[1,]
#  for (j in unlist(features[i])) {
#   print(i)
#  print(j)
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
#}
}
for (i in full) {
i[,1]
#  for (j in unlist(features[i])) {
#   print(i)
#  print(j)
#cypher(graph, "CREATE (i:Item {name:'Beer'})-[r:HAS_FEATURE]->(f:Feature {name:'beer'})");
#}
}
lapply(full, function(row){print(row[1])})
lapply(full, function(row){print(row)})
lapply(full, function(row){print(row[[1]])})
?lapply
sapply(full, function(row){print(row[[1]])})
sapply(full, function(row){print(row[1])})
sapply(full, function(row){print(row[1,1])})
sapply(full, function(row){print(row[1,])})
lapply(menu, function(row){print(row[1,])})
lapply(menu, function(row){print(row[1])})
lapply(menu, function(row){print(row)})
lapply(menu, function(row){print(row$Titles)})
lapply(menu, function(row){print(row[,1])})
lapply(menu, function(row){print(row[1,])})
lapply(menu, function(row){print(row[[1]])})
View(menu)
?apply
apply(menu, function(row){print row})
apply(menu, 1, function(row){print row})
apply(menu, 1, function(row){print(row)})
apply(menu, 1, function(row){print(row[1])})
apply(full, 1, function(row){print(row[1])})
apply(full, 1, function(row){print(row[[1]])})
apply(full, 1, function(row){print(row[[2]])})
apply(full, 1, function(row){print(row[[3]])})
apply(full, 1, function(row){
title_tmp <- row[[1]];
print(title_tmp);
}
)
apply(full, 1, function(row){
title_tmp <- row[[1]];
print(title_tmp);
for (feature_tmp in row[[3]]){
print(feature_tmp);
}
}
)
full[1,]
full[1:5,]
full[1:2,]
apply(full[1:5], 1, function(row){
title_tmp <- row[[1]];
#print(title_tmp);
for (feature_tmp in row[[3]]){
#print(feature_tmp);
cypher(graph, "CREATE (i:Item)-[r:HAS_FEATURE]->(f:Feature) WHERE i.name={items} AND f.name={features}", items=title_tmp, features=feature_tmp);
}
}
)
apply(full, 1, function(row){
title_tmp <- row[[1]];
#print(title_tmp);
for (feature_tmp in row[[3]]){
#print(feature_tmp);
cypher(graph, "CREATE (i:Item)-[r:HAS_FEATURE]->(f:Feature) WHERE i.name={items} AND f.name={features}", items=title_tmp, features=feature_tmp);
}
}
)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
a <- getRandomOptionNodes(graph, 2)
a[[1]
a[[1]]
a[[1]]$name
a[[1]]$keywords
options<-getRandomOptions(graph,2); #Returns option names and IDs
source('~/GitHub/choiceEngineR/test_run.R')
options<-getRandomOptionNodes(graph,2); #Returns option nodes
choice<-options[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")),];
source('~/GitHub/choiceEngineR/test_run.R')
choice<-options[[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))]];
1
options[[1]]
choice<-options[[readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))]];
b<- readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep=""))
b
options[[b]]
options[[as.numeric(b)]]
source('~/GitHub/choiceEngineR/test_run.R')
choice<-options[[as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")))]];
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
choice$id
choice$optionId
options[[options$optionId!=choice$optionId];
nonChoice<-options[[options$optionId!=choice$optionId]];
options$optionId!=choice$optionId
options$optionId
source('~/GitHub/choiceEngineR/test_run.R')
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
selectionCode
options[[selectionCode]]
previousChoice <- choice;
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
print(paste("Choice is ",choice$name, sep=""));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
print(paste("Choice is ",choice$name, sep=""));
selectionCode <- as.numeric(readline(paste("Please select either: \n(1) ",options[[1]]$name,
"\nor (2) ", options[[2]]$name, ": ", sep="")));
choice<-options[[selectionCode]];
print(paste("Choice is ",choice$name, sep=""));
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getNonSelectionCode(1)
getNonSelectionCode(2)
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-option[[getNonChoiceSelectionCode(selectionCode)]];
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-options[[getNonChoiceSelectionCode(selectionCode)]];
source('~/GitHub/choiceEngineR/test_run.R')
nonChoice<-options[[getNonSelectionCode(selectionCode)]];
print(paste("Choice is ",choice$name, sep=""));
source('~/GitHub/choiceEngineR/test_run.R')
print(paste("Choice is ",choice$name, sep=""));
print(paste("Choice is not",nonChoice$name, sep=""));
print(paste("Choice is not ",nonChoice$name, sep=""));
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
selectionCode <- getSelectionCode(options)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
choice
choice$keywords
choice$description
options[[1]]
options[[2]]
options[[1]]
nonChoice$description
nonChoice$keywords
?split
split(choice$keywords)
?strsplit
strSplit(choice$keywords,",")
strsplit(choice$keywords,",")
unlist(strsplit(choice$keywords,","))
unlist(strsplit(choice$keywords,","))[2]
unlist(strsplit(choice$keywords,","))[1]
optionNode1 <- choice
optionNode2 <- nonChoice
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
getOptionNodeDifference(choice, nonChoice)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
print(paste("Choice is ",choice$name, sep=""));
print(paste("Choice is not ",nonChoice$name, sep=""));
saveChoiceNodeToSession(graph, session, i, previousChoice, choice);
session <- createSession(graph);
saveChoiceNodeToSession(graph, session, i, previousChoice, choice);
saveChoiceNodeToSession(graph, session, 1, previousChoice, choice);
chosenFeatures<-getOptionNodeDifference(graph, choice, nonChoice);
chosenFeatures<-getOptionNodeDifference(choice, nonChoice);
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
assignMultipleFeaturePreferencesToSession(graph, session, chosenFeatures, 1);
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
assignMultipleFeaturePreferencesToSession(graph, session, chosenFeatures, 1);
session
nonChosenFeatures<-getOptionNodeDifference(nonChoice, choice);
assignMultipleFeaturePreferencesToSession(graph, session, nonChosenFeatures, -1)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
assignMultipleFeaturePreferencesToSession(graph, session, nonChosenFeatures, -1)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(2)
doesValidSolutionExistBasic(10)
a<-doesValidSolutionExistBasic(10)
a<-TRUE
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(10)
doesValidSolutionExistBasic(10)
source('~/GitHub/choiceEngineR/solutionCheck.R')
doesValidSolutionExistBasic(10)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
1
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
top <- getTopOptionInfo(graph, 2, 10)
top <- getTopOptionInfo(graph, session, 10)
top$optionId
getOptionNodeById(graph, topOptions$optionId[[1]]
getOptionNodeById(graph, topOptions$optionId[[1]]
getOptionNodeById(graph, topOptions$optionId[[1]])
getOptionNodeById(graph, top$optionId[[1]])
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
source('~/GitHub/choiceEngineR/test_run.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/solutionCheck.R')
testRun(graph)
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
source('~/GitHub/choiceEngineR/queryChoiceGraph.R')
testRun(graph)
install.packages("RNeo4j")
install.packages("devtools")
devtools::install_github("nicolewhite/RNeo4j")
install.packages("stringr")
install.packages("stringr")
install.packages("plyr")
install.packages("R.utils")
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph()
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
graph<-newGraph()
graph <- startGraph("http://localhost:7474/db/data/", username="neo4j", password="graph");
clear(graph, input=FALSE);
?clear
clear(graph)
nodes <- getLabeledNodes(graph, "Test");
nodes
clear(graph)
alice = createNode(graph, "Person", name="Alice")
graph
clear(graph)
alice = createNode(graph, "Person", name="Alice")
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
graph<-newGraph()
graph <- startGraph("http://localhost:7474/db/data/", username="neo4j", password="graph");
alice = createNode(graph, "Person", name="Alice")
alice <- createNode(graph, "Person", name="Alice")
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
library(RNeo4j)
graph = startGraph("http://localhost:7474/db/data/")
graph = startGraph("http://localhost:7474/db/data/", username="neo4j",password="graph")
alice = createNode(graph, "Person", name="Alice")
sessionInfo()
remove.packages("httr")
install.packages("http://cran.r-project.org/src/contrib/Archive/httr/httr_0.6.1.tar.gz", repos=NULL, type="source")
alice = createNode(graph, "Person", name="Alice")
library(httr)
sessionInfo()
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
alice = createNode(graph, "Person", name="Alice")
clear(graph)
