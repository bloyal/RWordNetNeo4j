sessionInfo()
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
sessionInfo()
graph <- startGraph(url="http://localhost:7474/db/data/", username="neo4j", password="graph")
clear(graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
dataPath="./testData/"
testData<-readPOSdata(dataPath, verbose=FALSE);
n<-testData$noun
View(n)
n$words
?str_count
str_count(n$words,"\\w+")
str_count(n$words,"\\D+")
counts <- str_count(n$words,"\\D+")
counts <- c(counts, str_count(v$words,"\\D+"))
counts <- c(counts, str_count(testData$verb$words,"\\D+"))
counts <- c(counts, str_count(testData$adverb$words,"\\D+"))
counts <- c(counts, str_count(testData$adjective$words,"\\D+"))
counts <- str_count(n$words,"\\D+")
counts <- c(counts, str_count(testData$adj$words,"\\D+"))
counts <- c(counts, str_count(testData$verb$words,"\\D+"))
counts <- c(counts, str_count(testData$noun$words,"\\D+"))
counts <- c(counts, str_count(testData$noun$adv,"\\D+"))
counts
sum(counts)
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
dataPath="./testData/"
testData<-readPOSdata(dataPath, verbose=FALSE);
v<-testData$verb
View(v)
v$words
?str_match_all
str_match_all(v$words, "(\\w) \\d)")
str_match_all(v$words, "(\\w) \\d")
str_match_all(v$words, "(\\w+) \\d")
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
str_match_all(v$words, "(\\w+) \\d")
str_match_all(v$words, "(\\w+) \\d")[,2]
str_match_all(v$words, "(\\w+) \\d")[2]
str_match_all(v$words, "(\\w+) \\d")[[,2]]
str_match_all(v$words, "(\\w+) \\d")[[2]]
str_match_all(v$words, "(\\w+) \\d")[[2]][[2]]
str_match_all(v$words, "(\\w+) \\d")[[5]]
str_match_all(v$words, "(\\w+) \\d")[[6]]
str_match_all(v$words, "(\\w+) \\d")[[7]]
str_match_all(v$words, "(\\w+) \\d")[[8]]
vs <-data.frame(v$synsetOffset, v$words)
View(vs)
vs <-data.frame(synsetOffset = v$synsetOffset, words = v$words)
View(vs)
?split
strsplit(vs$words, " ")
vs$words
?data.frame
vs <-data.frame(synsetOffset = v$synsetOffset, words = v$words, stringsAsFactors=FALSE)
strsplit(vs$words, " ")
str_match_all(vs$words, "(\\w+) \\d")[[8]]
str_match_all(vs$words, "(\\w+) \\d")
unlist(str_match_all(vs$words, "(\\w+) \\d"))
str_match_all(vs$words, "(\\w+) \\d")
a<-str_match_all(vs$words, "(\\w+) \\d")
?ddplyr
?ldply
ldply(a)
b <- list(synsetOffset = vs$synsetOffset, words = a)
ldply(b)
?reshape
a
lapply(a, print)
lapply(a, cbind, vs$synsetOffset)
warnings()
lapply(a, function(x){})
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
lapply(a, function(x){
print(x);
})
?lapply
splitString <- unlist(strsplit(a, " "));
splitString <- unlist(strsplit(vs$words, " "));
splitString
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
sapply(vs, function(x){
print(x);
});
sapply(vs, function(x){ print(x);});
sapply(vs, function(x){ strsplit(x$words, "\\s");});
sapply(vs, function(x){ strsplit(x["words"], "\\s");});
s
sapply(vs, function(x){ print(x$words);});
sapply(vs, function(x){ print(x[words]);});
sapply(vs, function(x){ print(x["words"]);});
sapply(vs, function(x){ print(x[,"words"]);});
sapply(vs, function(x){ print(typeof(x));});
str_match_all(vs$words, "(\\w+) \\d")
c<-lapply(vs, function(x){str_match_all(vs$words, "(\\w+) \\d")});
c
c<-lapply(vs$words, function(x){str_match_all(x, "(\\w+) \\d")});
c
c<-lapply(vs$words, function(x){unlist(str_match_all(x, "(\\w+) \\d")}));
c<-lapply(vs$words, function(x){unlist(str_match_all(x, "(\\w+) \\d"))});
c
c[[1]]
c<-lapply(vs$words, function(x){unlist(str_match_all(x, "(\\w+) \\d")[2])});
c
c<-lapply(vs$words, function(x){unlist(str_match_all(x, "(\\w+) \\d")[[2]])});
c<-lapply(vs$words, function(x){unlist(str_match_all(x, "(\\w+) \\d"))});
unlist(str_match_all(x, "(\\w+) \\d"))
c<-lapply(vs$words, function(x){str_match_all(x, "(\\w+) \\d")});
c
c[[23]]
c[[23]][[1]]
c[[23]][[1]][[1]]
c[[23]][[1]][[1,1]]
c[[23]][[1]][[1,2]]
t <- vs[[1]]
t
t <- vs[1]
t
vs
v
v[1,]
vs[1,]
t<-vs[1,]
c<-str_match_all(t, "(\\w+) \\d")
c
c[[2]]
c[[2]][,2]
c[[2]][[,2]]
c[[2]][,2]
c[2][,2]
c[[2]][,2]
str_match_all(t, "(\\w+) \\d")[[2]][2]
str_match_all(t, "(\\w+) \\d")[[2]][,2]
c<-lapply(vs$words, function(x){str_match_all(x, "(\\w+) \\d")[[2]][,2]});
vs
t
c<-lapply(vs, function(x){str_match_all(x, "(\\w+) \\d")[[2]][,2]});
c
vs$words
str_match_all(vs$words, "(\\w+) \\d")[[2]][,2]
str_match_all(vs$words, "(\\w+) \\d")
t<-vs$words
t
t[[1]]
str_match_all(t[[1]], "(\\w+) \\d")
str_match_all(t[[1]], "(\\w+) \\d")[,2]
str_match_all(t[[1]], "(\\w+) \\d")[[,2]]
unlist(str_match_all(t[[1]], "(\\w+) \\d"))[[,2]]
unlist(str_match_all(t[[1]], "(\\w+) \\d"))[,2]
str_match_all(t[[1]], "(\\w+) \\d")
str_match_all(t[[1]], "(\\w+) \\d")[[1]]
str_match_all(t[[1]], "(\\w+) \\d")[[1]][,2]
c<-lapply(vs, function(x){str_match_all(x, "(\\w+) \\d")[[1]][,2]});
c
c<-lapply(vs$words, function(x){str_match_all(x, "(\\w+) \\d")[[1]][,2]});
c
names(c)<-vs$synsetOffset
c
ldply(c)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(testData)
createWordNodes(testData$verb)
?ldply
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordFrame(testData$verb)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
indx <- sapply(vs$words, length)
indx
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
wordList <- getWordList(v);
?str_to_lower
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
wordList <- getWordList(v);
wordlist
wordList
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
wordList <- getWordList(v);
wordList
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
wordList <- getWordList(v);
wordList
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
lapply(wordList, print)
lapply(wordList, function(x){print(x)})
lapply(wordList, function(x){print(name(x)})
lapply(wordList, function(x){print(names(x)})
lapply(wordList, function(x){print(names(x));})
wordList[1]
wordList[[1]]
wordList[1]
names(wordList)
lapply(wordList, function(x){print(x)})
?lapply
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
?join
v
a<-v[1,]
a
a$synsetOffset
a$words
str_replace_all(str_to_lower(str_match_all(a$words, "(\\w+) \\d")[[1]][,2]),"_"," ")
b<-str_replace_all(str_to_lower(str_match_all(a$words, "(\\w+) \\d")[[1]][,2]),"_"," ")
b
join(a$words, b)
join(a$synsetOffset, b)
join(data.frame(a$synsetOffset), data.frame(b)
join(data.frame(a$synsetOffset), data.frame(b))
join(data.frame(a$synsetOffset), data.frame(b), type="full")
join(data.frame(a$synsetOffset), data.frame(b), type="inner")
b
c
b
a
b
data.frame(a$synsetOffset, b)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordList(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordList(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordList(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordList(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordList(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
getWordList(a)
a
typeof(v[1,])
c[1,]
v[1,]
View(v)
typeof(v)
?type
?class
class(v)
class(v[1,])
sapply(v,function(x){print(class(x))})
View(v)
?sapply
?apply
apply(v, 1, function(x){print(class(x))})
apply(v, 1, function(x){print(x$synsetOffset)})
apply(v, 1, function(x){print(x["synsetOffset"])})
apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE)})
z<-apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE)})
z[[1]]
z[[2]]
z[[3]]
warnings()
?data.frame
z<-apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE, check.names=FALSE)})
z<-apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE, check.rows = =FALSE)})
z<-apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE, check.rows=FALSE)})
warnings()
z<-apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE, row.names=NULL)})
z
z<-apply(v, 1, function(x){data.frame(synsetOffset=x["synsetOffset"], word=str_match_all(x["words"], "(\\w+) \\d")[[1]][,2], stringsAsFactors=FALSE, row.names=NULL)})
ldply(z)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getWordList(v)
y
ldply(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getWordList(v)
View(y)
View(v)
View(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getWordList(v)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getWordList(v)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
y<-getWordList(v)
View(y)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
a<-createWordNodes(v, graph)
a
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
View(translateLexFilenum)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
graph<-newGraph(username="neo4j", password="graph");
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
createWordNodes(v, graph)
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
remove.packages("httr")
devtools::install_github("nicolewhite/RNeo4j")
install.packages(httr)
install.packages("httr")
install.packages("httr")
devtools::install_github("nicolewhite/RNeo4j")
sessionInfo()
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
sessionInfo()
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
dataPath="./testData/"
testData<-readPOSdata(dataPath, verbose=FALSE);
write.table(testData, "testData_output.txt")
?write.table
a<-ldply(testData)
a
write.table(a, "testData_output.txt")
write.csv(a, "testData_output.csv", quote=FALSE)
testData<-readPOSdata(dataPath, verbose=FALSE);
unitTest("Noun data count", nrow(testData$noun),27);
unitTest("Verb data count", nrow(testData$verb),26);
unitTest("Adjective data count", nrow(testData$adj),52);
unitTest("Adverb data count", nrow(testData$adv),25);
#Initiate graph
graph<-newGraph(username="neo4j", password="graph");
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
createSynsetNodes(graph, testData, verbose=FALSE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),130);
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
createWordNodes(graph, testData, verbose=FALSE);
unitTest("Word node count", countNodesbyLabel(graph, "Word"),202);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
createWordNodes(graph, testData, verbose=FALSE);
runIntegrationTests();
View(a)
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
testData<-readPOSdata(dataPath, verbose=FALSE);
unitTest("Noun data count", nrow(testData$noun),27);
unitTest("Verb data count", nrow(testData$verb),26);
unitTest("Adjective data count", nrow(testData$adj),52);
unitTest("Adverb data count", nrow(testData$adv),25);
graph<-newGraph(username="neo4j", password="graph");
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
createSynsetNodes(graph, testData, verbose=FALSE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),128);
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
#Create lex nodes
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
#Create synset nodes
createSynsetNodes(graph, testData, verbose=FALSE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),128);
graph<-newGraph(username="neo4j", password="graph");
#Create lex nodes
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
#Create synset nodes
createSynsetNodes(graph, testData, verbose=FALSE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),128);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
graph<-newGraph(username="neo4j", password="graph");
#Create lex nodes
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
#Create synset nodes
createSynsetNodes(graph, testData, verbose=FALSE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),128);
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
testData<-readPOSdata(dataPath, verbose=FALSE);
unitTest("Noun data count", nrow(testData$noun),27);
unitTest("Verb data count", nrow(testData$verb),26);
unitTest("Adjective data count", nrow(testData$adj),52);
unitTest("Adverb data count", nrow(testData$adv),25);
#Initiate graph
graph<-newGraph(username="neo4j", password="graph");
#Create lex nodes
createLexNodes(graph, verbose=FALSE);
unitTest("Lexicographer node count", countNodesbyLabel(graph, "LexName"),45);
createSynsetNodes(graph, testData, verbose=TRUE);
unitTest("Synset node count", countNodesbyLabel(graph, "Synset"),128);
#Create word nodes
createWordNodes(graph, testData, verbose=FALSE);
unitTest("Word node count", countNodesbyLabel(graph, "Word"),202);
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
runIntegrationTests();
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
runIntegrationTests();
runIntegrationTests();
runIntegrationTests();
runIntegrationTests();
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
runIntegrationTests();
runIntegrationTests();
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/createWordNetNeo4j.R')
source('~/GitHub/RWordNetNeo4j/testFunctions.R')
source('~/GitHub/RWordNetNeo4j/genericGraphFunctions.R')
